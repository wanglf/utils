#+TITLE: Linux kernel development
#+AUTHOR: Micky Ching
#+EMAIL:
#+OPTIONS: H:3 ^:nil toc:2
#+LATEX_CLASS: latex-slide
#+LATEX_HEADER: \logo{\includegraphics[height=0.8cm]{fig/logo}\vspace{7.5cm}}

* Write Linux driver
** Write a kernel module
*** linux kernel architectures
#+BEGIN_CENTER
#+ATTR_LATEX: :float t :placement [H] :width 8cm
file:fig/kdevel/kernel-structure.png
#+END_CENTER

*** kernel module structure
#+BEGIN_SRC cpp
#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/init.h>
#+END_SRC
- module_init: int func(void)
- module_exit: void func(void)

*** kernel module parameter
#+BEGIN_SRC cpp
int scull_major = SCULL_MAJOR;
module_param(scull_major, int, S_IRUGO);
/* module_param_array(name, type, num, perm); */
#+END_SRC
#+BEGIN_SRC sh
insmod hello.ko scull_major=123
#+END_SRC

| bool           | boolean               |
| charp          | char pointer          |
| int/short/long | and uint/ushort/ulong |

*** kernel module symbol table
- EXPORT_SYMBOL_GPL :: export API for other module
- MODULE_VERSION :: module version string
- MODULE_LICENSE :: define module liscense
- MODULE_AUTHOR :: author info
- MODULE_ALIAS :: another name for module
- MODULE_DESCRIPTION :: module info
- MODULE_DEVICE_TABLE :: for autoload device driver

** Write a char device driver
*** define device operations
- file_operations :: provide func to operate device

#+BEGIN_SRC cpp
struct file_operations scull_fops = {
    .owner =    THIS_MODULE,
    .llseek =   scull_llseek,
    .read =     scull_read,
    .write =    scull_write,
    .unlocked_ioctl = scull_ioctl,
    .open =     scull_open,
    .release =  scull_release,
};
#+END_SRC

*** alloc ID and register operations
- register =dev_t= major/minor
#+BEGIN_SRC sh
ls
crw-rw-rw-  1 root  root      1,   9 May 28 09:42 urandom
#+END_SRC

#+BEGIN_SRC cpp
int register_chrdev_region(dev_t from, unsigned count,
                           const char *name);
void cdev_init(struct cdev *cdev,
               const struct file_operations *fops);
int cdev_add(struct cdev *p, dev_t dev, unsigned count);
#+END_SRC

*** free resource when unload module
#+BEGIN_SRC cpp
void cdev_del(struct cdev *p);
void unregister_chrdev_region(dev_t from, unsigned count);
#+END_SRC

*** file_operations open/read API
#+BEGIN_SRC cpp
static int scull_open(struct inode *inode, struct file *file);
static ssize_t scull_read(struct file *file, char __user *buf,
                          size_t count, loff_t *ppos);
#+END_SRC
- put data-structure to file->private_data in open
- get data-structure from file->private_data in read/write...
- use copy_to_user/copy_from_user to access user-space

** Memory manipulation and Sync method
*** Memory manipulation
- for frequently alloc memory should use kmem_cache_create API
#+BEGIN_SRC cpp
static void *kmalloc(size_t size, gfp_t flags);
void kfree(const void *addr);

long copy_to_user(void __user *to, const void *from, long n);
long copy_from_user(void *to, const void __user *from, long n);
#+END_SRC
- GFP_KERNEL :: may sleep
- GFP_ATOMIC :: no sleep, may use emergency
- GFP_NOWAIT :: no sleep, not use emergency

*** IO manipulation
#+BEGIN_SRC cpp
struct resource *request_mem_region(unsigned long start,
                                    unsigned long len, char *name);
void release_mem_region(unsigned long start, unsigned long len);
void __iomem *ioremap(unsigned long port, unsigned long size);
void iounmap(volatile void __iomem *addr);
unsigned int ioread8(void *addr);       /* 16, 32 */
void iowrite8(u8 value, void *addr);    /* 16, 32 */
#+END_SRC

*** DMA manipulation
#+BEGIN_SRC cpp
void *dma_alloc_coherent(struct device *dev, size_t size,
                         dma_addr_t *dma, gfp_t gfp);
void dma_free_coherent(struct device *dev, size_t size,
                       void *ptr, dma_addr_t dma);

dma_addr_t dma_map_single(struct device *dev, void *cpu_addr,
                          size_t size, enum dma_data_direction dir);
void dma_unmap_single(struct device *dev, dma_addr_t dma_addr,
                      size_t size, enum dma_data_direction dir);
int dma_map_sg(struct device *dev, struct scatterlist *sg,
               int nents, enum dma_data_direction dir);
void dma_unmap_sg(struct device *dev, struct scatterlist *sg,
                  int nents, enum dma_data_direction dir);
#+END_SRC
- ptr :: used to save DMA description table

*** DMA engine framework
- hardware, DMA engine is a DMA controller
- software, DMA engine is a framework, provide uniform API

please ref:
1. [[https://www.kernel.org/doc/Documentation/dmaengine/provider.txt][DMAengine controller documentation]]
2. [[https://www.kernel.org/doc/Documentation/dmaengine/client.txt][DMA Engine API Guide]]

*** DMA engine slave API
1. Allocate a DMA slave channel
2. Set slave and controller specific parameters
3. Get a descriptor for transaction
4. Submit the transaction
5. Issue pending requests and wait for callback notification

*** mutex exclusion
- Only one task can hold the mutex at a time
- Whoever locked a mutex must unlock it
- Recursive locks and unlocks are not allowed
- A process cannot exit while holding a mutex
- Can't be used at atomic context
- A mutex can be managed only via the official API

*** mutex exclusion API
#+BEGIN_SRC cpp
void mutex_init(struct mutex *mutex);
void mutex_lock(struct mutex *mutex);
int mutex_trylock(struct mutex *lock);  /* 1 - success, 0 - failed */
void mutex_unlock(struct mutex *mutex);
#+END_SRC

*** semaphore sync API
#+BEGIN_SRC cpp
void sema_init(struct semaphore *sem, int val);
void down(struct semaphore *sem);       /* lock */
void up(struct semaphore *sem);         /* unlock */
#+END_SRC

| lock         | mutex     | semaphore   |
|--------------+-----------+-------------|
| may hungry   | yes       | no          |
| unlock times | one       | many        |
| purpose      | exclusion | synchronous |

*** spinlock sync API
- Can't sleep while holding lock
- Can't preempted while holding lock
#+BEGIN_SRC c
void spin_lock_init(spinlock_t *lock);
void spin_lock(spinlock_t *lock);
void spin_unlock(spinlock_t *lock);
void spin_lock_irqsave(spinlock_t *lock, unsigned long flags);
void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags);
#+END_SRC
- if lock not used in ISR, disable IRQ is not need

** Wait and Async execute sequence
*** wait for some time
#+BEGIN_SRC cpp
void ndelay(unsigned long nsecs);
void udelay(unsigned long usecs);
void mdelay(unsigned long msecs);
void msleep(unsigned int msecs);
void ssleep(unsigned int seconds);
void usleep_range(unsigned long min, unsigned long max);
#+END_SRC

*** wait for completion
#+BEGIN_SRC cpp
void init_completion(struct completion *x);
void reinit_completion(struct completion *x)
void wait_for_completion(struct completion *x);
long wait_for_completion_interruptible_timeout(struct completion *x,
                                               unsigned long timeout);
void complete(struct completion *x);
#+END_SRC

*** wait for event
#+BEGIN_SRC cpp
void init_waitqueue_head(wait_queue_head_t *wq);
void wait_event(wait_queue_head_t *wq, bool cond);
void wake_up(wait_queue_head_t *wq);
int wait_event_interruptible(wait_queue_head_t *wq, bool cond);
void wake_up_interruptible(wait_queue_head_t *wq);
#+END_SRC

*** Timer
#+BEGIN_SRC cpp
void init_timer(struct timer_list *timer);
void setup_timer(struct timer_list *timer,
                 void (*func)(unsigned long),
                 unsigned long data);
void add_timer(struct timer_list *timer);
int mod_timer(struct timer_list *timer, unsigned long expires);
int del_timer(struct timer_list *timer);
int del_timer_sync(struct timer_list *timer);
#+END_SRC
- expires mean new timeout in jiffies
- sync API guarantees not running on any CPU

*** Kthread
#+BEGIN_SRC cpp
int kthread_func(void *data);
struct task_struct *kthread_run(kthread_func func,
                                void *param, const char *name);
int kthread_stop(struct task_struct *kthread);
bool kthread_should_stop(void);
#+END_SRC

*** Kthread example
#+BEGIN_SRC cpp
#include <...>
static int thread_function(void *data)
{
    while(!kthread_should_stop()) {
        pr_info("loop time %d\n", (*(int *)data)++);
        schedule();
    }
    return *(int *)data;
}
int loop;
static int kernel_init(void)
{
    task = kthread_run(&thread_function, &loop, "loopadder");
    pr_info("Kernel Thread: %s\n", task->comm);
    return 0;
}
static void kernel_exit(void) { kthread_stop(task); }
module_init(kernel_init);
module_exit(kernel_exit);
MODULE_AUTHOR("Micky Ching");
#+END_SRC
*** Tasklet
#+BEGIN_SRC cpp
void tasklet_init(struct tasklet_struct *t,
                  void (*func)(unsigned long),
                  unsigned long data);
void tasklet_schedule(struct tasklet_struct *t);
void tasklet_kill(struct tasklet_struct *t);
#+END_SRC
*** Tasklet example
#+BEGIN_SRC cpp
static void tasklet_function(unsigned long data)
{
    struct example *es = (struct example *)data;
    // you can use spinlock to protect data
}

struct example *static_es;
static int kernel_init(void)
{
    struct example *es = kmalloc(sizeof(struct example), GFP_KERNEL);
    tasklet_init(es->tasklet, tasklet_function, es);
    tasklet_schedule(es->tasklet);
    static_es = es;
    return 0;
}

static void kernel_exit(void)
{
    tasklet_kill(static_es->tasklet);
    kfree(static_es);
}
#+END_SRC
*** Workqueue
- Use a dependent queue
#+BEGIN_SRC cpp
struct workqueue_struct *create_workqueue(const char *name);
INIT_WORK(struct work_struct *work,
          void (*function)(void *data));
int queue_work(struct workqueue_struct *queue,
               struct work_struct *work);
int queue_delayed_work(struct workqueue_struct *queue,
                       struct work_struct *work,
                       unsigned long delay_ms);
void flush_workqueue(struct workqueue_struct *queue);
void destroy_workqueue(struct workqueue_struct *queue);
#+END_SRC
- Use a system shared queue
#+BEGIN_SRC cpp
int schedule_work(struct work_struct *work);
void flush_scheduled_work(void);
#+END_SRC

* Kernel build system
** Write build rules
*** write kernel Makefile(in kernel)
#+BEGIN_SRC makefile
obj-y += mmc/ 				# build in kernel
obj-$(CONFIG_MMC) += core/		# depends CONFIG_MMC
obj-$(CONFIG_MMC_BLOCK) += mmc_block.o
mmc_block-objs := block.o queue.o
#+END_SRC

*** write kernel Makefile(out kernel)
#+BEGIN_SRC makefile
# build rule is same with in-kernel, but should add below
KERNELDIR ?= /lib/modules/$(shell uname -r)/build
PWD := $(shell pwd)
default:
	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules
#+END_SRC

*** write Kconfig
#+BEGIN_SRC makefile
comment "MMC/SD/SDIO Card Drivers"

config MMC_BLOCK
	tristate "MMC block device driver"
	depends on BLOCK
	default y
	help
	  Say Y here to enable the MMC block device driver support...

config MMC_BLOCK_MINORS
	int "Number of minors per block device"
	depends on MMC_BLOCK
	range 4 256
	default 8
	help
	  ...
#+END_SRC

*** make config for building
#+BEGIN_CENTER
#+ATTR_LATEX: :float t :placement [H] :width 8cm
file:fig/kdevel/menuconfig.png
#+END_CENTER

*** build kernel and install
#+BEGIN_SRC sh
make
make modules_install
make install
make clean
make M=drivers/mmc
make mrproper
git clean -fdx
#+END_SRC

* Submit patch to kernel
** Steps for submit patch
*** config email client for git
#+BEGIN_SRC sh
$ cat .msmtprc
# Set default values for all following accounts.
defaults
logfile ~/.msmtp.log

# account1
account account1
protocol smtp
host mail.server.com.cn
from yourname@mail.com.cn
user yourname@mail.com.cn
password xxxxxx
port 25
auth ntlm
syslog LOG_MAIL

# Set a default account
account default: account1
#+END_SRC

*** prepare patch for submit

#+BEGIN_SRC sh
git format-patch -1
git format-patch --thread --cover-letter -4
git format-patch --thread --cover-letter --subject-prefix="PATCH v2" -4
#+END_SRC

*** check patch before submit
#+BEGIN_SRC sh
./scripts/checkpatch.pl *.patch
make C=2 M=drivers/mmc                  # need sparse
#+END_SRC

*** send patch to linux kernel
#+BEGIN_SRC sh
git send-email --smtp-server /usr/bin/msmtp \
--from yourname@email.com \
--to devel@linuxdriverproject.org \
--to linux-kernel@vger.kernel.org \
--cc gregkh@linuxfoundation.org \
--cc ... \
*.patch
#+END_SRC
#+BEGIN_SRC sh
./scripts/get_maintainer.pl [options] patchfile
./scripts/get_maintainer.pl [options] -f file|directory
#+END_SRC

