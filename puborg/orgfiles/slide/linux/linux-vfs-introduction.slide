#+TITLE: Linux VFS Introduction
#+AUTHOR: Micky Ching
#+EMAIL:
#+OPTIONS: H:3 toc:2 ^:nil
#+LATEX_CLASS: latex-slide

* 虚拟文件系统基本概念
** VFS基本概念
*** VFS是一个抽象层
- VFS是一个抽象层，介于应用程序和具体的文件系统之间
  - 应用程序可以不加区分的访问各种文件系统
- VFS为其它模块提供服务
  - 内核其它模块一般不会操作具体文件系统

#+ATTR_LATEX: :height 5cm
file:fig/vfs/vfs-in-kernel.png

*** VFS对用户提供统一抽象
file:fig/vfs/vfs-abstract-to-user.png

*** 文件系统类型
- 磁盘文件系统
  - Ext2/3, Reiserfs, FAT, iso9660...
- 虚拟文件系统
  - /proc, /sysfs...
#+BEGIN_SRC sh
$ ll /proc/locks
-r--r--r-- 1 root root 0 Dec 15 09:36 /proc/locks
$ cat /proc/locks
1: POSIX  ADVISORY  READ  2402 08:02:18488238 128 128
2: POSIX  ADVISORY  READ  2402 08:02:18481583 1073741826 1073742335
3: POSIX  ADVISORY  WRITE 2257 08:02:18481315 0 0
4: POSIX  ADVISORY  READ  2233 08:02:18481313 128 128
...
#+END_SRC
- 网络文件系统

*** 通用文件模型
- VFS提供统一的方法和抽象
  - VFS提供完整性视图，具体文件系统只需实现子功能
- VFS提供文件的统一视图
- 一切皆文件
  - 字符设备、块设备、管道、套接字、终端等
- 文件可以打开、关闭、读写、IO控制等
- 文件在打开时创建，在磁盘上没有对应的映像
- 进程对文件的记录是私有的，父子进程可共享文件
- 同一文件可被多个进程打开
  - 一个inode可以关联多个file

*** inode
- inode称为索引节点
  - 包括普通文件、目录、硬链接、符号链接等
- inode通过编号唯一识别
- inode的内容包括元数据和数据段
  - 目录的inode数据段为名称和编号列表

file:fig/vfs/vfs-inode-content.png

*** 链接
- 符号链接的inode数据段为目标路径名
- 硬链接和目标是同一inode，无法区分链接和目标
  - 硬链接通过计数器实现
  - 硬链接不能是目录

** VFS组成结构
*** 数据结构概览
#+ATTR_LATEX: :width 10cm
file:fig/vfs/vfs-structures.png

*** 核心数据结构
- inode
  - inode_operations 对索引节点进行操作
- file
  - file_operations 对文件内容进行操作
- dentry
  - dentry_operations 对目录项进行操作
- super_block
  - super_operations 对挂载文件系统进行操作

*** inode/inode_operations
- 最后访问时间、修改时间、修改元数据时间
- 文件长度、文件编号、使用计数、硬链接计数
- 访问权限、所有权
- 设备号、设备共同体

- inode_operations 一般文件系统只设置少数几个成员
  - 对节点操作，如rmdir, mkdir, mknod, rename, link等
#+BEGIN_SRC cpp
const struct inode_operations fat_file_inode_operations = {
    .setattr    = fat_setattr,
    .getattr    = fat_getattr,
};
#+END_SRC

*** inode链表
#+BEGIN_SRC cpp
struct inode {
    struct hlist_node   i_hash;
    struct list_head    i_wb_list;
    struct list_head    i_lru;
    struct list_head    i_sb_list;
    union {
        struct hlist_head i_dentry;
        struct rcu_head i_rcu;
    };
    ...
}
#+END_SRC

*** inode链表
| node      | head                            | struct        |
|-----------+---------------------------------+---------------|
| i_hash    | inode_hashtable + hash(sb, ino) |               |
| i_wb_list | b_dirty                         | bdi_writeback |
|           | b_more_io                       | bdi_writeback |
|           | b_io                            | bdi_writeback |
| i_lru     | s_inode_lru                     | super_block   |
| i_sb_list | s_inodes                        | super_block   |
| d_alias   | i_dentry                        | dentry        |

*** inode链表
- 每个超级块都维护了该超级块下所有节点的一个链表
  - 调用new_inode()就会将inode加入到s_inodes [fn:s_inodes]
- 节点如果为脏，那么就会加入到b_dirty [fn:b_dirty]
  - 回写的时候对b_io处理
  - 由bdi_writeback_workfn()调用queue_io()执行
- 当引用计数减少到0的时候，就加入到LRU链表[fn:i_lru]

[fn:s_inodes] inode_in_use
[fn:b_dirty] s_dirty
[fn:i_lru] inode_unused

*** inode状态
- 脏状态，数据和磁盘不一致
- 活动态，数据和磁盘一致
- 休克态，未关联到任何文件，不处于活动状态
  - 查找一个不存在的inode时，可以很快确定
- 释放态，如卸载或磁盘拔出后其节点被释放

*** 进程中的信息
#+BEGIN_SRC cpp
struct task_struct {
    int link_count, total_link_count;   // 防止环形链表无限循环
    struct fs_struct *fs;               // 文件系统信息
    struct files_struct *files;         // 打开的文件列表
    struct nsproxy *nsproxy;            // 名称空间
    ...
}
#+END_SRC
- 进程可以通过 =files->fdt->fd[fd]= 来查找文件

*** fs_struct
#+BEGIN_SRC cpp
struct fs_struct {
    int users;
    spinlock_t lock;
    seqcount_t seq;
    int umask;                          // 标准掩码：man umask
    int in_exec;
    struct path root, pwd;
};
#+END_SRC
#+BEGIN_SRC cpp
struct path {
    struct vfsmount *mnt;
    struct dentry *dentry;
};
#+END_SRC
*** files_struct
#+BEGIN_SRC cpp
struct files_struct {
    atomic_t count;
    struct fdtable __rcu *fdt;
    struct fdtable fdtab;

    spinlock_t file_lock ____cacheline_aligned_in_smp;
    int next_fd;
    unsigned long close_on_exec_init[1];
    unsigned long open_fds_init[1];
    struct file __rcu * fd_array[NR_OPEN_DEFAULT];
};
#+END_SRC
*** fdtable
#+BEGIN_SRC cpp
struct fdtable {
    unsigned int max_fds;               // fd数组元素个数
    struct file __rcu **fd;             // fd数组
    unsigned long *close_on_exec;       // 执行exec要关闭的位图
    unsigned long *open_fds;            // 已经打开的位图
    struct rcu_head rcu;
};
#+END_SRC
*** expand_fdtable()
- 分配一个更大的描述符表
- 复制原来的信息到新的描述符表
- 用RCU方法赋值，替换原来的描述符表
- 释放原来的描述符表
  - 注意只有对执行过扩展操作的描述表才需要释放

*** file
- 路径、访问模式、所有权限、标志位、引用计数
- 关联inode、当前位置、地址空间(inode->i_data)

- 当引用计数减少到0的时候，就需要释放
  - *f_u.fu_rcuhead* 进程上下文
    - 执行____fput()，立即释放
  - *f_u.fu_llist* 中断上下文
    - 加入到delayed_fput_list以延迟释放
    - 延迟调用函数为delayed_fput()

*** file_operations
- llseek :: 在文件中定位
- read/write/aio_read/aio_write :: 数据传输
- release :: 计数器降为0时释放
- readdir :: 读取目录内容
- ioctl :: 与设备通信
- poll/select :: IO多路复用
- flush :: 文件关闭时调用
- fsync :: 同步文件内容

*** file_operations
#+BEGIN_SRC cpp
const struct file_operations fat_file_operations = {
    .llseek         = generic_file_llseek,
    .read           = new_sync_read,
    .write          = new_sync_write,
    .read_iter      = generic_file_read_iter,
    .write_iter     = generic_file_write_iter,
    .mmap           = generic_file_mmap,
    .release        = fat_file_release,
    .unlocked_ioctl = fat_generic_ioctl,
#ifdef CONFIG_COMPAT
    .compat_ioctl   = fat_generic_compat_ioctl,
#endif
    .fsync          = fat_file_fsync,
    .splice_read    = generic_file_splice_read,
};
#+END_SRC

*** 名称空间
#+BEGIN_SRC cpp
struct nsproxy {
    atomic_t count;
    struct uts_namespace *uts_ns;
    struct ipc_namespace *ipc_ns;
    struct mnt_namespace *mnt_ns;
    struct pid_namespace *pid_ns_for_children;
    struct net           *net_ns;
};
#+END_SRC
#+BEGIN_SRC cpp
struct mnt_namespace {
    atomic_t                count;      // 使用该名称空间的进程数
    struct mount            *root;
    struct list_head        list;       // 该名称空间中所有vfsmount
    ...
};
#+END_SRC

*** 目录项高速缓存
- 从设备查找文件名关联的inode可能很慢
  - 活动路径名名和最近使用的路径名都将缓存
  - dcache是一个树状结构，每个节点对应一个目录项
- 读取一个目录项就会创建一个dentry，以缓存找到的数据
  - 每个dentry对应到系统中的一个文件名
  - 每个dentry的父节点必然在dcache中
- 目录项缓存用于实现索引节点缓存
  - 硬链接使得一个inode可以和多个dentry关联

*** dentry基本字段
- 引用计数、标志位
- 超级块、关联inode、父目录项、文件名（最后一个分量）
#+BEGIN_SRC cpp
struct dentry {
    struct hlist_bl_node d_hash;
    struct list_head d_lru;
    union {
        struct list_head d_child;
        struct rcu_head d_rcu;
    } d_u;
    struct list_head d_subdirs;
    struct hlist_node d_alias;
    ...
}
#+END_SRC
*** dentry链表
| node    | head                           | struct      |
|---------+--------------------------------+-------------|
| d_hash  | dentry_hashtable + hash_32()   |             |
| d_lru   | s_dentry_lru [fn:s_dentry_lru] | super_block |
| d_child | d_subdirs                      | dentry      |
| d_rcu   |                                |             |
| d_alias | i_dentry                       | inode       |

- LRU中可能包含引用计数大于0的dentry
  - 当对象恢复活动状态时不会立即从LRU链表删除

[fn:s_dentry_lru] dentry_unused

*** dentry_operations
- d_revalidate :: 检查一致性，网络文件系统很有用
- d_hash :: 计算hash值，允许文件系统提供更优化的算法
- d_compare :: 比较文件名，允许文件系统提供更优化的算法
- d_delete :: 引用计数减少到0时调用，如果不实现就使用LRU算法
- d_prune :: 通知文件系统dentry将被unhash并释放
- d_release :: 用于释放目录项
- d_iput :: 当该dentry不再使用时减少inode计数
- d_dname :: 获取文件名
- ... ::

*** dentry相关操作
- dget()/dput() :: 防止使用时被释放
- d_delete() :: 将dentry标记为negative，助于查找
- d_drop() :: 对dentry执行unhash，不再缓存
- d_alloc() :: 分配dentry
- d_instantiate() :: 初始化dentry，关联到inode
- d_lookup :: 查找parent下名字为name的dentry
#+BEGIN_SRC cpp
struct dentry *d_alloc(struct dentry *parent, const struct qstr *name);
void d_instantiate(struct dentry *entry, struct inode *inode);
static inline void d_add(struct dentry *entry, struct inode *inode)
{
    d_instantiate(entry, inode);
    d_rehash(entry);
}
struct dentry *d_lookup(const struct dentry *parent, const struct qstr *name);
#+END_SRC

*** dentry状态
- 活动态，关联到inode，计数器为正
- 空闲态，关联到inode，计数器为0
- 休克态，未关联到inode，帮助查找
  - 准确的叫法是negative dentry
- 死亡态，被释放
- LRU链表包含空闲态和休克态的dentry
* VFS基本操作

** 挂载与卸载

*** 文件系统类型
#+BEGIN_SRC cpp
struct file_system_type {
    const char *name;                   // 文件系统的名字：rootfs, ext2...
    int fs_flags;                       // 文件系统特征
    struct dentry *(*mount) (struct file_system_type *fs_type, int flags,
                             const char *dev_path, void *data);
    void (*kill_sb) (struct super_block *sb);
    struct module *owner;               // 编译为模块时防止使用时卸载
    struct file_system_type *next;      // 链表头为全局file_systems
    struct hlist_head fs_supers;
};
#+END_SRC

- register_filesystem()
  - 将新文件系统类型加入到file_systems链表尾部
- unregister_filesystem()
  - 将文件系统从file_systems链表删除

*** 挂载操作
- 装载由用户空间通过mount调用实现
  - 至少应提供文件系统名称、设备节点、挂载点三个参数
    - 命令mount可以查看文件系统装载情况
  - 多个文件系统可以装载到同一挂载点
    - 新装载文件系统会屏蔽原装载点内容
    - 进程不能访问原系统
    - 当后一个文件系统卸载之后，之前的文件系统就会显示出来
  - 文件系统可被挂载到多处，但只有一个超级块

*** 挂载命令
#+BEGIN_SRC sh
mount -t vfat /dev/sdb /media/usb
#+END_SRC
- 检测vfat是否注册，未注册时尝试加载模块
- 查看设备节点是否存在，设备节点是否已被安装
- 查看挂载点是否存在
- 为文件系统分配超级块
- 读取文件系统设备中的信息填充超级块

*** mount
#+BEGIN_SRC cpp
struct mount {
    struct vfsmount mnt;
    union {
        struct rcu_head mnt_rcu;
        struct llist_node mnt_llist;
    };
    const char *mnt_devname;        /* Name of device e.g. /dev/dsk/hda1 */
    struct mountpoint *mnt_mp;      /* where is it mounted */
    struct hlist_node mnt_mp_list;  /* list mounts with the same mountpoint */
    int mnt_id;                     /* mount identifier */
    int mnt_group_id;               /* peer group identifier */
    int mnt_expiry_mark;            /* true if marked for expiry */
    struct hlist_head mnt_pins;
    ...
};
#+END_SRC

*** mount
- 挂载点目录项、父挂载系统、主挂载系统、挂载名称空间
- 计数器
#+BEGIN_SRC cpp
struct vfsmount {
    struct dentry *mnt_root;            // 和挂载点目录项指向同一位置
    struct super_block *mnt_sb;
    int mnt_flags;                      // 独立于文件系统的标志
};
#+END_SRC
*** mount链表
| node                   | head                            | struct        |
|------------------------+---------------------------------+---------------|
| mnt_mounts             | mnt_child                       | mount         |
| mnt_instance           | s_mounts                        | super_block   |
| mnt_list               | list                            | mnt_namepace  |
| mnt_hash               | &mount_hashtable[i] [fn:m_hash] |               |
| mnt_slave              | mnt_slave_list                  | mount         |
| mnt_share              | mnt_share                       | mount         |
| mnt_expire             | expiry_list                     | depends on fs |
| *mnt_llist*            | delayed_mntput_list             |               |
| *mnt_rcu* [fn:mnt_rcu] | __cleanup_mnt                   |               |

[fn:m_hash] see m_hash()
[fn:mnt_rcu] mnt_rcu和mnt_llist配合用于择时释放

*** super_block
- 块长、文件长度限制、时间粒度、标志位
- 文件系统类型、根目录、具体文件系统私有数据
- 设备号、设备结构、备用设备信息

| node         | head         | struct           |
|--------------+--------------+------------------|
| s_list       | super_blocks |                  |
| s_instances  | fs_supers    | file_system_type |
| i_sb_list    | s_inodes     | inode            |
| mnt_instance | s_mounts     | mount            |
| d_lru        | s_dentry_lru | dentry           |
| i_lru        | s_inode_lru  | inode            |
*** super_operations
- alloc_inode :: 分配inode
- destroy_inode :: 释放inode
- dirty_inode :: 将inode标记为脏
- drop_inode :: 是否要删除inode，一般使用通用方法
- evict_inode :: 清除inode
- remount_fs :: 重新挂载
- ... ::


- 删除调用流程
  - 用drop_inode()检查是否要删除
  - 如果要删除，接着调用evict_inode()
  - 最后调用destroy_inode()

*** mount系统调用
#+BEGIN_SRC cpp
// 复制用户空间数据并调用do_mount
SYSCALL_DEFINE5(mount, char __user *, dev_name,
                char __user *, dir_name,
                char __user *, type,
                unsigned long, flags,
                void __user *, data);
long do_mount(const char *dev_name, const char __user *dir_name,
              const char *type_page, unsigned long flags,
              void *data_page);
#+END_SRC

*** do_mount
- 查找挂载点路径
- 权限检查、标志位检查
- 根据标志位选择具体挂载方法
  - do_remount MS_REMOUNT
  - do_loopback MS_BIND
  - do_change_type 处理共享、从属、不可绑定装载
  - do_move_mount MS_MOVE
  - do_new_mount
    - vfs_kern_mount
    - do_add_mount

*** vfs_kern_mount
- vfs_kern_mount
  - alloc_vfsmnt 即分配mount
  - mount_fs 即type->mount()
    - 以ext2为例，调用mount_bdev()，传递fill_super()
  - 设置链表关系
    - 如将mnt->mnt_instance加入到root->d_sb->s_mounts


- mount_bdev
  - sget() 分配超级块
  - fill_super()
    - 以ext2为例，调用ext2_fill_super()

*** do_add_mount
- graft_tree
  - attach_recursive_mnt
    - 将文件系统添加到父文件系统名称空间
    - 把节点加入到散列表、名称空间、父文件系统等链表中
*** umount系统调用
#+BEGIN_SRC cpp
SYSCALL_DEFINE2(umount, char __user *, name, int, flags);
static int do_umount(struct mount *mnt, int flags);
#+END_SRC
- 根据用户提供路径找到挂载点
- 权限检查
- do_umount
  - umount_tree
    - 卸载文件系统及其子文件系统
** 路径查找
*** 发展历史
- [<2.5.10] 每查找一个分量都要获取一次dcache_lock
- [<2.5.62] 持有dcache_lock时查找尽可能多的分量
- [<2.6.38] 引入dcache查找RCU模式，即部分RCU模式
- [>2.6.38] 将RCU引入到整个查找过程
  - 即便在REF模式查找下也会有局部RCU查找模式

*** nameidata
- 查找过程会使用nameidata保存当前查找情况
#+BEGIN_SRC cpp
struct nameidata {
    struct path     path;               // 保存最终结果
    struct qstr     last;               // 需要查找的字符串
    struct path     root;
    struct inode    *inode;             // path.dentry.d_inode
    unsigned int    flags;
    unsigned        seq, m_seq;         // 用于顺序锁
    int             last_type;          // 标志位，如表示./..
    unsigned        depth;              // 查找深度，防止死循环
    char            *saved_names[MAX_NESTED_LINKS + 1];
};
#+END_SRC

*** 查找标志
#+BEGIN_SRC cpp
#define LOOKUP_FOLLOW           0x0001
#define LOOKUP_DIRECTORY        0x0002
#define LOOKUP_AUTOMOUNT        0x0004

#define LOOKUP_PARENT           0x0010
#define LOOKUP_REVAL            0x0020
#define LOOKUP_RCU              0x0040

#define LOOKUP_OPEN             0x0100
#define LOOKUP_CREATE           0x0200
#define LOOKUP_EXCL             0x0400
#define LOOKUP_RENAME_TARGET    0x0800
...
#+END_SRC

*** filename_lookup
#+BEGIN_SRC cpp
static int filename_lookup(int dfd, struct filename *name,
                           unsigned int flags, struct nameidata *nd);
static int path_lookupat(int dfd, const char *name,
                         unsigned int flags, struct nameidata *nd);
#+END_SRC
- 文件名查找必经窗口，按如下顺序进行查找
  - [RCUwalk] 从缓存查找，全局RCU，使用顺序锁
  - [REFwalk] 从缓存查找，局部RCU，使用d_lock
  - [REVwalk] 从设备查找

*** 查找面临的问题
- 跟踪符号链接，识别循环符号链接
- 检测访问权限
- 检测并跟踪挂载点，即延伸进入挂载文件系统
  - [RCU] __follow_mount_rcu
    - [..] __lookup_mnt
  - [REF] follow_managed
    - [..] follow_mount
  - [REV] follow_managed

*** path_lookupat
- path_init 确定查找起点
  - 名字首字符为 =/= 就从根目录查找，否则从进程当前目录查找
- link_path_walk 不断贯穿目录层次，保留一层
  - 检查权限、计算路径散列值
  - 处理 =.= 和 =..= 、合并连续 =/=
  - walk_component 查找下一个分量
  - nested_symlink 查找符号链接，该函数会检测是否超出深度
  - [ERR] terminate_walk
- lookup_last 查找最后一层
  - follow_link
- complete_walk

*** walk_component
- 返回1表示找到一个符号链接
- handle_dots
  - RCU follow_dotdot_rcu
  - REF follow_dotdot
- lookup_fast
  - RCU __d_lookup_rcu
    - 事实上和__d_lookup几乎一样，根据调用环境做了少许优化
  - REF __d_lookup
- REV lookup_slow
  - __lookup_hash
    - lookup_dcache 尝试d_lookup，失败会分配一个dentry
    - lookup_real 如果上一步尝试失败，就调用i_op->lookup
- [ERR] terminate_walk

*** nested_symlink
- follow_link
  - i_op->follow_link 将符号链接转换为inode
  - link_path_walk 穿越符号链接
- walk_component 穿越最后一个分量

*** 哈希表查找
#+BEGIN_SRC cpp
struct dentry *__d_lookup(const struct dentry *parent,
                          const struct qstr *name);
#+END_SRC
- __d_lookup 注意d_lookup多了rename_lock顺序锁
  - 根据parent和name计算hash值，找到链表头
  - 最复杂的情况是查找过程发生了重命名
  - 用于REFwalk，这一步实际是RCUwalk
  - 遍历每个节点比较dentry是否是查找目标

** 文件读写
*** 打开文件
#+BEGIN_SRC cpp
SYSCALL_DEFINE3(open, const char __user *, filename, int, flags,
                umode_t, mode);
long do_sys_open(int dfd, const char __user *filename, int flags,
                 umode_t mode);
#+END_SRC
- build_open_flags 构建标志位
- getname 构建文件名
- get_unused_fd_flags 分配fd
- do_filp_open 同路径名查找一样，有三次机会
  - path_openat 打开文件，返回file指针
- fsnotify_open 通知文件已被打开
- fd_install 将文件描述符表中对应指针指向file

*** path_openat
- get_empty_filp 分配file
- 查找路径名，和filename_lookup比较接近
- vfs_open 打开文件

*** 读取数据
#+BEGIN_SRC cpp
SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t,
                count);
ssize_t vfs_read(struct file *file, char __user *buf, size_t count,
                 loff_t *pos);
#+END_SRC
- file_pos_read 获取位置
- vfs_read
  - 读写区域验证
  - f_op->read
  - fsnotify_access 通知对文件发生了访问
- file_pos_write 更新位置

*** 写入数据
#+BEGIN_SRC cpp
SYSCALL_DEFINE3(write, unsigned int, fd, const char __user *, buf,
                size_t, count);
ssize_t vfs_write(struct file *file, const char __user *buf,
                  size_t count, loff_t *pos);
#+END_SRC
- 同读取数据完全对称

* 编程技巧
** 编程技巧
*** 数据嵌入
| struct       | pointer | body                         |
|--------------+---------+------------------------------|
| dentry       | d_name  | d_iname                      |
| files_struct | fdt     | fdtab                        |
| filename     | name    | &filename + sizeof(filename) |

*** 共同体
| struct | union1    | union2       | note         |
|--------+-----------+--------------+--------------|
| file   | fu_llist  | *fu_rcuhead* | delay free   |
| mount  | mnt_llist | *mnt_rcu*    | delay free   |
| dentry | d_child   | *d_rcu*      | delay free   |
| inode  | i_nlink   | *__i_nlink*  | modify const |
|        | i_bdev    | i_cdev       | exclusive    |
* 参考资料
** 参考资料
*** 参考资料
- [[http://book.ilkaddimlar.com/d_pdf_book_proqramlashdirma_23519.do][Linux Kernel Development Chapter 13]]
- [[http://www.ittc.ku.edu/~kulkarni/teaching/EECS678/projects/scheduling/materials/plka.pdf][Professional Linux Kernel Architecture Chapter 8]]
- [[http://idak.gop.edu.tr/esmeray/UnderStandingKernel.pdf][Understanding the Linux Kernel Chapter 12]]
- [[https://www.kernel.org/doc/Documentation/filesystems/vfs.txt][Documentation/filesystems/vfs.txt]]
- [[https://www.kernel.org/doc/Documentation/filesystems/path-lookup.txt][Documentation/filesystems/path-lookup.txt]]

*** 补充资料
- [[http://www.cs.columbia.edu/~krj/os/lectures/L21-LinuxVFS.pdf][2013 Linux VFS]]
- [[http://www.ic.unicamp.br/~islene/2s2013-mo806/vfs/andre-zhen.pdf][2011 Linux Virtual File System]]
- [[http://www.ibm.com/developerworks/library/l-virtual-filesystem-switch/][2009 Anatomy of the Linux virtual file system switch]]
- [[http://www.ibm.com/developerworks/library/l-linux-filesystem/][2007 Anatomy of the Linux file system]]
- [[http://www.win.tue.nl/~aeb/linux/lk/lk.html][2003 The Linux kernel Chapter 8]]
- [[http://lwn.net/Articles/13325/][2002 Creating Linux virtual filesystems]]
- [[http://www.tldp.org/LDP/lki/][2002 Linux Kernel 2.4 Internals Chapter 3]]
- [[http://www.win.tue.nl/~aeb/linux/vfs/trail.html][2001 A small trail through the Linux kernel]]
- [[http://www.inf.fu-berlin.de/lehre/SS01/OS/Lectures/Lecture16.pdf][2001 Linux virtual filesystem (VFS) overview]]
- [[http://www.tldp.org/LDP/tlk/][1999 The Linux Kernel Chapter 9]]
- [[http://www.coda.cs.cmu.edu/doc/talks/linuxvfs/index.htm][1998 Linux Virtual File System]]
- [[http://www.science.unitn.it/~fiorella/guidelinux/tlk/tlk-html.html][1997 The Linux Kernel Chapter 9]]
- [[http://www.linux.it/~rubini/docs/vfs/vfs.html][1997 The "Virtual File System" in Linux]]
- [[http://www.tldp.org/LDP/khg/HyperNews/get/fs/vfstour.html][1996 A tour of the Linux VFS]]
