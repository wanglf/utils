#+TITLE: Makefile简介
#+AUTHOR: Micky Ching
#+OPTIONS: H:4 ^:nil
#+LATEX_CLASS: latex-doc
#+PAGE_TAGS: make

* 基本概念
#+HTML: <!--abstract-begin-->
Makefile最重要的三个概念是目标、依赖和命令，所有的目标都是通过命令来生成，
而执行命令的顺序则是由依赖关系确定。基本语法如下所示。

#+BEGIN_SRC makefile
target: dependency
	command
#+END_SRC

另外一个比较重要的是可以在makefile中定义变量，定义的方式就是直接用等号赋值，
引用变量则要用 =$(varname)= 来表示。
#+HTML: <!--abstract-end-->

* 基本语法
** 基本符号与规则
*** 基本符号
- .PHONY :: 设定假目标，防止发现和目标相同的文件时不去编译。
- @ :: 如果在命令开头，表示编译时不显示当前命令，这样可以减少不必要的输出。
- $@ :: 表示规则中的目标。
- $^ :: 表示规则中的所有依赖。
- $< :: 表示规则中的第一个依赖。

#+BEGIN_SRC makefile
.PHONY: all
all: dep1 dep2 dep3
	@echo "\$$@ = $@"
	@echo "$$^ = $^"
	@echo "$$< = $<"
dep1 dep2 dep3:
#+END_SRC

要输出 =$= 符号就需要用两个，注意 =$@= 在Bash shell中有特殊含义，所以必须要转义。

- $(MAKE) :: 处理Makefile的命令。
- $(MAKECMDGOALS) :: Makefile构建的目标名。

*** 精简规则
如下写法表示目标文件的生成规则，避免手动输入大量重复规则。
#+BEGIN_SRC makefile
%.o: %.c
	$(CC) -c $^ -o $@
#+END_SRC

*** 条件判断
条件判断包括 =ifdef= =ifndef= =ifeq= 和 =ifneq= 几个，使用必须记住以 =endif= 结束。
中间可以插入 =else= 分支。

** 变量赋值
*** 基本变量赋值
- = :: 对变量赋值，注意将执行全部展开。
- := :: 对变量赋值，只执行一次展开。
- ?= :: 条件赋值，如果已经定义就保持不变。

#+BEGIN_SRC makefile
x = one
y = $(x) two
x = three

a := one
b := $(x) two
a := three

all:
	@echo "x = $(y), a = $(b)"
#+END_SRC
#+BEGIN_SRC text
x = three two, a = one two
#+END_SRC

处理这里提到的变量定义方法，还有另外两种变量定义方式，
一种是通过命令行传递，这种方法会覆盖Makefile中的定义，
另外一种方式是通过shell来导出变量，即使用export定义。
*** 高级变量赋值

如下这段代码实现批量后缀替换。
#+BEGIN_SRC makefile
src = a.c b.c c.c
header = $(src:.c=.h)
all:
	@echo "header: $(header)"
#+END_SRC
#+BEGIN_SRC text
header: a.h b.h c.h
#+END_SRC

- overide :: 用于强制避免变量被覆盖。

** 函数
- abspath :: 将路径名转换为绝对路径名， =$(abspath _path)= 。
- realpath :: 用于获取真实路径， =$(realpath _path)= 。
- addprefix :: 增加前缀， =$(addprefix _pre, _var)= 。
- addsuffix :: 增加后缀， =$(addsuffix _suf, _var)= 。
#+BEGIN_SRC makefile
src = a.c b.c c.c
dir_src = $(addprefix src/, $(src))
all:
	@echo $(dir_src)
#+END_SRC

- eval :: 相当于执行一行语句，返回空字符串。
- filter :: 从列表中过滤处满足模式的部分： =$(filter _pattern, _text)= 。
- filter-out :: 返回过滤后剩余的部分。
- notdir :: 从路径抽取文件名： =$(notdir _names)= 。
- patsubst :: 规则替换： =$(patsubst _pattern, _replace, _text)= 。
- strip :: 删除多余空格： =$(strip _text)= 。
- wildcard :: 获取当前目录中满足规则的文件/目录列表。

** 依赖关系
*** 自动生成依赖
利用 =gcc -MM= 可以得到依赖关系，而 =gcc -E= 只进行预处理而不编译。
