#+TITLE: Git Introduction
#+AUTHOR: Micky Ching
#+OPTIONS: H:4 ^:nil
#+LATEX_CLASS: latex-doc
#+PAGE_TAGS: git

* 基本概念
每一个git仓库都有一个 =.git= 目录，该目录下主要存在如下文件：
| branches/   | 分支信息，该目录已不再使用                  |
| config      | 配置信息                                    |
| description | 描述信息                                    |
| HEAD        | 头指针                                      |
| hooks/      | 用于在特定事件下触发的脚本                  |
| info/       | 包含 =exclude= 文件，用于指定要忽略的文件   |
| objects/    | 数据对象，包括：commits、trees、blobs、tags |
| refs/       | 包括分支指针，远程指针，标签指针            |

* 基本用法
** 参数配置
#+BEGIN_SRC sh
# 如果只想针对当前项目配置就不用加--global选项
git config --global user.name "Micky Ching"
git config --global user.email "mickyching@gmail.com"
#+END_SRC
** 常用操作
*** 初始化提交
#+HTML: <!--abstract-begin-->
#+BEGIN_SRC sh
git init                                # 初始化项目
git add <files>                         # 添加文件/文件夹
git commit                              # 提交
git commit -m <message>                 # 直接把信息写入提交
git commit --amend                      # 以修改方式提交
#+END_SRC
#+HTML: <!--abstract-end-->

*** 信息查看
#+BEGIN_SRC sh
git status                              # 查看项目状态
git log                                 # 查看日志
git diff <commit>                       # 查看相对于指定提交的更改
#+END_SRC

仓库中的文件有三种状态，其转换关系如下图所示：
#+BEGIN_CENTER
#+ATTR_LATEX: :float t :placement [H] :width 6cm
file:fig/git/git-status.png
#+END_CENTER

下图展示了用于查看不同节点间差异的方法。
#+BEGIN_CENTER
#+ATTR_LATEX: :float t :placement [H] :width 6cm
file:fig/git/git-diff-status.png
#+END_CENTER

*** 分支管理
#+BEGIN_SRC sh
git branch                              # 查看分支
git branch <branchname>                 # 创建分支
git branch -d <branchname>              # 删除已合并的分支
git branch -D <branchname>              # 删除分支
git branch -dr <remote/branch>          # 删除本地下载的远程分支
git checkout <branchname>               # 切换分支
git checkout <commit> -- <filename>     # 检出指定文件
git reset <commit>                      # 复位到指定提交
git merge <branchname>                  # 合并指定分支
git rebase <branchname>                 # 基于指定分支
git revert <commit>                     # 反转提交
#+END_SRC

*** 标签管理
#+BEGIN_SRC sh
git tag <v0.1>                          # 添加tag
git tag                                 # 列举tag
#+END_SRC
*** 暂存区
#+BEGIN_SRC sh
git stash                               # 添加当前修改到暂存区
git stash list                          # 列举暂存区
git stash pop                           # 弹出暂存区
#+END_SRC

*** 清理
#+BEGIN_SRC sh
git clean -ndx                          # 显示要删除的文件列表
git clean -fdx                          # 删除仓库外的文件
git gc                                  # 优化本地仓库
#+END_SRC

*** 选取
#+BEGIN_SRC sh
git cherry-pick <commit>                # 选取指定提交放到当前位置
#+END_SRC

*** 错误追踪
#+BEGIN_SRC sh
git blame <filename>                    # 查看每一行在何时引入
git blame -L n,m <filename>             # 查看文件指定行何时引入
#+END_SRC
- -L n,m :: 其中n表示起始行，m表示显示行数。

#+BEGIN_SRC sh
git bisect start                        # 开始二分查找
git bisect reset                        # 结束二分查找
git bisect good                         # 标记为good
git bisect bad                          # 标记为bad
git checkout bisect/bad                 # 切换到最终定位的bad
git bisect log > bis.log                # 保存日志
git bisect replay <file.log>            # 从日志恢复进度
git bisect HEAD1 HEAD2
#+END_SRC

*** 仓库打包
#+BEGIN_SRC sh
git archive --format="emacs/" -o emacs.zip HEAD
git archive -o partial.tar HEAD lisp site-lisp # 只对指定目录打包
git archive --format=tar --prefix="emacsd/" master | gzip > emacsd.tar.gz
#+END_SRC

** 远程管理
*** 远程配置
创建ssh密钥
#+BEGIN_SRC sh
ssh-keygen -t rsa -C "mickyching@gmail.com" -f ~/.ssh/micky-gmail
ssh-add ~/.ssh/micky-gmail                    # 添加密钥
ssh -i ~/.ssh/micky-gmail -T git@github.com   # 验证测试
#+END_SRC
如果不添加密钥，可能会出现如下错误提示：
#+BEGIN_QUOTE
Agent admitted failure to sign using the key
#+END_QUOTE

如果要配置多个远程仓库帐号，需要编辑配置文件 =~/.ssh/config= 指定登录信息。
#+BEGIN_SRC text
Host github                             # 主机名，可任意命名
    HostName github.com                 # 登录地址
    User git
    Port 22
    IdentityFile ~/.ssh/micky-gmail     # 证书路径
#+END_SRC

一旦配置好ssh就可以下载和上传了。
#+BEGIN_SRC sh
git clone git@github.com:mickyching/emacs.d
#+END_SRC

*** 远程操作
#+BEGIN_SRC sh
git remote add <repo-name> <repo-url>   # 添加远程仓库地址
git remote -v                           # 查看远程仓库地址
git remote set-url <repo-name> <url>    # 更改仓库地址
git pull <repo-name> <branch>           # 拉取远程仓库分支到当前分支
git fetch <repo-name>                   # 下载远程仓库
git fetch <repo-name> <a>:<b>           # 将远程分支a下载为分支b
git push <repo-name> <branch>           # 将当前分支发送到远程分支
git push <repo-name> <a>:<b>            # 将分支a发送到远程分支b
git push <repo-name> :<b>               # 删除远程分支
git push --tags                         # 推送tag
#+END_SRC

** 子模块
添加子模块。
#+BEGIN_SRC sh
git submodule add [-b <branch>] [--name <name>] [--] <repository> [<path>]
#+END_SRC

如果一个仓库已经包含了submodule，下载完这个仓库之后执行如下命令，
即可更新子模块。
#+BEGIN_SRC sh
git submodule update --init
#+END_SRC
也可以使用如下命令在克隆仓库的时候一步到位克隆子模块。
#+BEGIN_SRC sh
git clone --recursive <repo-url>
#+END_SRC

** repo工具
如果有多个仓库要一并管理，用 =repo= 是比较好的解决方案。
基本命令如下：
#+BEGIN_SRC sh
repo help                               # 获取帮助信息
repo help command                       # 获取指定命令的帮助信息
repo init -u URL                        # 下载所有仓库
repo init -u URL -b <branch>            # 下载所有仓库的某个分支
repo status                             # 查看对所有项目的更改
repo branches                           # 查看每个仓库所在分支
repo sync                               # 同步所有仓库
repo sync [project-list]                # 同步指定仓库
repo update [project-list]              # 上传指定仓库
repo diff [project-list]                # 查看修改
repo start <branch>                     # 为每个仓库创建分支
repo prune <branch>                     # 删除已经merge的分支
repo abandon <branch>                   # 删除分支，无论是否merge
repo manifest                           # 生成manifest文件
repo foreach [project-list] -c command  # 对每个仓库执行指定命令
repo forall -c command                  # 不限于git命令
repo version                            # 查看repo版本信息
#+END_SRC

在网络不好的情况下调用 =repo sync= 经常会中途失败，
可以用如下脚本来多次同步：
#+BEGIN_SRC sh
$?=1;
for ((i = 0; i < 10; i++))
do
    if [ $? -ne 0 ]; then
        repo sync;
    fi
done
#+END_SRC

在调用 =repo status= 查看的时候前两个字符分别表示暂存区和工作区状态，
具体如下表所示：
| 第1个字符 | 暂存区状态       | 第2个字符 | 工作区状态 |
|-----------+------------------+-----------+------------|
| -         | 没有文件被修改   | -         | 未更改     |
| A         | 有文件添加       | m         | 已更改     |
| D         | 有文件删除       | d         | 已删除     |
| M         | 有文件更改       |           |            |
| R         | 有文件重命名     |           |            |
| C         | 有文件被复制     |           |            |
| T         | 有文件模式被修改 |           |            |
| U         | 有冲突，Unmerged |           |            |

* 高级用法
在首次提交前，添加了错误文件时，由于没有HEAD，不能使用git reset HEAD撤销，
此时可以使用如下命令。
#+BEGIN_SRC sh
git rm -r --cached <files>              # 撤销add添加的文件
#+END_SRC

当有多个文件要添加的时候，用 =git add -i= 进行交互式添加效率更高。
* 参考资料
- [[http://git-scm.com/book/zh/v1][Pro Git 1st Edition中文版]]
- [[https://www.atlassian.com/git/tutorials/][Become a git guru]]
- [[http://www.ibm.com/developerworks/cn/opensource/os-cn-tourofgit/][开源分布式版本控制工具 —— Git之旅]]
